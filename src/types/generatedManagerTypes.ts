/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/customnode/getmappings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get node-to-package mappings
     * @description Provides unified mapping between nodes and node packages
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: unknown[][]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/fetch_updates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check for updates
     * @description Fetches updates for custom nodes
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description No updates available */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Updates found */
        201: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error occurred */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/installed': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get installed custom nodes
     * @description Returns a list of installed node packages
     */
    get: {
      parameters: {
        query?: {
          /** @description Lists mode, default or imported */
          mode?: 'default' | 'imported'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: components['schemas']['NodePackageMetadata']
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/getlist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get custom node list
     * @description Provides a list of available custom nodes
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
          /** @description Skip update check */
          skip_update?: boolean
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              channel?: string
              node_packs?: {
                [key: string]: components['schemas']['NodePackageMetadata']
              }
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/alternatives': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get alternative node options
     * @description Provides alternatives for nodes
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              [key: string]: Record<string, never>
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/versions/{node_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get available versions for a node
     * @description Lists all available versions for a specific node
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          node_name: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              version?: string
            }[]
          }
        }
        /** @description Node not found */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/disabled_versions/{node_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get disabled versions for a node
     * @description Lists all disabled versions for a specific node
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          node_name: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              version?: string
            }[]
          }
        }
        /** @description Node not found */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/import_fail_info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get import failure information
     * @description Returns information about why a node failed to import
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            cnr_id?: string
            url?: string
          }
        }
      }
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description No information available */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/install/git_url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Install custom node via Git URL
     * @description Installs a custom node from a Git repository URL
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'text/plain': string
        }
      }
      responses: {
        /** @description Installation successful or already installed */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Installation failed */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/customnode/install/pip': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Install custom node dependencies via pip
     * @description Installs Python package dependencies for custom nodes
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'text/plain': string
        }
      }
      responses: {
        /** @description Installation successful */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/externalmodel/getlist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get external model list
     * @description Provides a list of available external models
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              models?: components['schemas']['ModelMetadata'][]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/update_all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Update all custom nodes
     * @description Queues update operations for all installed custom nodes
     */
    get: {
      parameters: {
        query?: {
          /** @description Source mode (e.g., "local", "remote") */
          mode?: components['parameters']['modeParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Update queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Processing already in progress */
        401: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reset queue
     * @description Resets the operation queue
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Queue reset successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get queue status
     * @description Returns the current status of the operation queue
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['QueueStatus']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/install': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Install custom node
     * @description Queues installation of a custom node
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Installation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Target node not found or security issue */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Start queue processing
     * @description Starts processing the operation queue
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Processing started */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Processing already in progress */
        201: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/fix': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Fix custom node
     * @description Attempts to fix a broken custom node installation
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Fix operation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/reinstall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reinstall custom node
     * @description Uninstalls and then reinstalls a custom node
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Reinstall operation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/uninstall': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Uninstall custom node
     * @description Queues uninstallation of a custom node
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Uninstallation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update custom node
     * @description Queues update of a custom node
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Update queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/disable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Disable custom node
     * @description Disables a custom node without uninstalling it
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['NodePackageMetadata']
        }
      }
      responses: {
        /** @description Disable operation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/update_comfyui': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Update ComfyUI
     * @description Queues an update operation for ComfyUI itself
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Update queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/queue/install_model': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Install model
     * @description Queues installation of a model
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ModelMetadata']
        }
      }
      responses: {
        /** @description Installation queued successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Invalid model request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snapshot/getlist': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get snapshot list
     * @description Returns a list of available snapshots
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              items?: components['schemas']['SnapshotItem'][]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snapshot/remove': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Remove snapshot
     * @description Removes a specified snapshot
     */
    get: {
      parameters: {
        query: {
          /** @description Target identifier */
          target: components['parameters']['targetParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Snapshot removed successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error removing snapshot */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snapshot/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Restore snapshot
     * @description Restores a specified snapshot
     */
    get: {
      parameters: {
        query: {
          /** @description Target identifier */
          target: components['parameters']['targetParam']
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Snapshot restoration scheduled */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error restoring snapshot */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snapshot/get_current': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get current snapshot
     * @description Returns the current system state as a snapshot
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description Error creating snapshot */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/snapshot/save': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Save snapshot
     * @description Saves the current system state as a new snapshot
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Snapshot saved successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error saving snapshot */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comfyui_manager/comfyui_versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ComfyUI versions
     * @description Returns available and current ComfyUI versions
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              versions?: string[]
              current?: string
            }
          }
        }
        /** @description Error retrieving versions */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/comfyui_manager/comfyui_switch_version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Switch ComfyUI version
     * @description Switches to a specified ComfyUI version
     */
    get: {
      parameters: {
        query?: {
          /** @description Target version */
          ver?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Version switch successful */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Error switching version */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/reboot': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reboot ComfyUI
     * @description Restarts the ComfyUI server
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Reboot initiated */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Security policy violation */
        403: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/preview_method': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get or set preview method
     * @description Gets or sets the latent preview method
     */
    get: {
      parameters: {
        query?: {
          /** @description New preview method */
          value?: 'auto' | 'latent2rgb' | 'taesd' | 'none'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Setting updated or current value returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/db_mode': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get or set database mode
     * @description Gets or sets the database mode
     */
    get: {
      parameters: {
        query?: {
          /** @description New database mode */
          value?: 'channel' | 'local' | 'remote'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Setting updated or current value returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/policy/component': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get or set component policy
     * @description Gets or sets the component policy
     */
    get: {
      parameters: {
        query?: {
          /** @description New component policy */
          value?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Setting updated or current value returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/policy/update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get or set update policy
     * @description Gets or sets the update policy
     */
    get: {
      parameters: {
        query?: {
          /** @description New update policy */
          value?: 'stable' | 'nightly' | 'nightly-comfyui'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Setting updated or current value returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/channel_url_list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get or set channel URL
     * @description Gets or sets the channel URL for custom node sources
     */
    get: {
      parameters: {
        query?: {
          /** @description New channel name */
          value?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Setting updated or channel list returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': {
              selected?: string
              list?: {
                name?: string
                url?: string
              }[]
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/component/save': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Save component
     * @description Saves a reusable workflow component
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          'application/json': {
            name?: string
            workflow?: Record<string, never>
          }
        }
      }
      responses: {
        /** @description Component saved successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
        /** @description Error saving component */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/component/loads': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Load components
     * @description Loads all available workflow components
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Components loaded successfully */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': Record<string, never>
          }
        }
        /** @description Error loading components */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get manager version
     * @description Returns the current version of ComfyUI-Manager
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/manager/notice': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get manager notice
     * @description Returns HTML content with notices and version information
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Successful operation */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/html': string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    Error: {
      /** @description Error message */
      error?: string
    }
    NodePackageMetadata: {
      /** @description Display name of the node package */
      title?: string
      /** @description Repository/package name */
      name?: string
      /** @description Source URLs for the package */
      files?: string[]
      /** @description Description of the node package functionality */
      description?: string
      /**
       * @description Installation method
       * @enum {string}
       */
      install_type?: 'git' | 'copy' | 'pip'
      /** @description Version identifier */
      version?: string
      /** @description Unique identifier for the node package */
      id?: string
      /** @description ID for UI reference */
      ui_id?: string
      /** @description Source channel */
      channel?: string
      /** @description Source mode */
      mode?: string
    }
    ModelMetadata: {
      /** @description Name of the model */
      name?: string
      /** @description Type of model */
      type?: string
      /** @description Base model type */
      base?: string
      /** @description Path for saving the model */
      save_path?: string
      /** @description Download URL */
      url?: string
      /** @description Target filename */
      filename?: string
      /** @description ID for UI reference */
      ui_id?: string
    }
    /** @description Name of the snapshot */
    SnapshotItem: string
    QueueStatus: {
      /** @description Total number of tasks */
      total_count?: number
      /** @description Number of completed tasks */
      done_count?: number
      /** @description Number of tasks in progress */
      in_progress_count?: number
      /** @description Whether the queue is currently processing */
      is_processing?: boolean
    }
  }
  responses: never
  parameters: {
    /** @description Source mode (e.g., "local", "remote") */
    modeParam: 'local' | 'remote' | 'default'
    /** @description Target identifier */
    targetParam: string
    /** @description New value to set */
    valueParam: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
