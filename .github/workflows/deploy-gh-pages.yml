name: Deploy to GitHub Pages

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

on:
  # Trigger after successful CI workflows complete
  workflow_run:
    workflows: ["Storybook and Chromatic CI", "Vitest Tests", "Tests CI"]
    types: [completed]
    branches: [main]
  # Allow direct pushes to the debug branch to kick off the full pipeline
  push:
    branches: [sno-deploy-ghpage]
  # Keep manual trigger for debugging
  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded (or manual dispatch/push)
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Storybook artifact from latest CI run
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Downloading latest Storybook artifact..."

          # Get latest successful Storybook workflow run
          LATEST_RUN=$(gh api "repos/${{ github.repository }}/actions/workflows" \
            --jq '.workflows[] | select(.name == "Storybook and Chromatic CI") | .id' | head -1)

          if [ -n "$LATEST_RUN" ]; then
            RUN_ID=$(gh api "repos/${{ github.repository }}/actions/workflows/$LATEST_RUN/runs?status=success&branch=main" \
              --jq '.workflow_runs[0].id' 2>/dev/null || echo "")

            if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
              # Download storybook-static artifact
              ARTIFACT_ID=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" \
                --jq '.artifacts[] | select(.name == "storybook-static") | .id' | head -1)

              if [ -n "$ARTIFACT_ID" ]; then
                gh api "repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip" > storybook-static.zip
                unzip -q storybook-static.zip -d ./storybook-static
                echo "‚úÖ Downloaded and extracted Storybook artifact"
              else
                echo "‚ö†Ô∏è  Storybook artifact not found, will build from source"
              fi
            else
              echo "‚ö†Ô∏è  No successful Storybook runs found, will build from source"
            fi
          else
            echo "‚ö†Ô∏è  Storybook workflow not found, will build from source"
          fi

      - name: Download Vitest reports from latest CI run
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Downloading latest Vitest reports..."

          # Get latest successful Vitest workflow run
          LATEST_RUN=$(gh api "repos/${{ github.repository }}/actions/workflows" \
            --jq '.workflows[] | select(.name == "Vitest Tests") | .id' | head -1)

          if [ -n "$LATEST_RUN" ]; then
            RUN_ID=$(gh api "repos/${{ github.repository }}/actions/workflows/$LATEST_RUN/runs?status=success&branch=main" \
              --jq '.workflow_runs[0].id' 2>/dev/null || echo "")

            if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
              # Download vitest-reports artifact
              ARTIFACT_ID=$(gh api "repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" \
                --jq '.artifacts[] | select(.name == "vitest-reports") | .id' | head -1)

              if [ -n "$ARTIFACT_ID" ]; then
                mkdir -p ./.gh-pages-cache
                gh api "repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID/zip" > vitest-reports.zip
                unzip -q vitest-reports.zip -d ./.gh-pages-cache/vitest-reports
                echo "‚úÖ Downloaded and extracted Vitest reports"
              else
                echo "‚ö†Ô∏è  Vitest reports not found, will generate from source"
              fi
            else
              echo "‚ö†Ô∏è  No successful Vitest runs found, will generate from source"
            fi
          else
            echo "‚ö†Ô∏è  Vitest workflow not found, will generate from source"
          fi

      - name: Build static assets (with artifact reuse)
        run: ./scripts/build-pages.sh

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload built pages as cache
        uses: actions/upload-pages-artifact@v3
        with:
          name: built-pages
          path: './docs/pages'

  # deploy-for-sno-deploy-ghpage-branch:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/sno-deploy-ghpage'
  #   steps:
  #     - name: Debug deployment
  #       run: |
  #         echo "Contents of ./docs/pages:"
  #         ls -la ./docs/pages
  #         echo "Contents of ./docs/pages/vitest-reports (if exists):"
  #         ls -la ./docs/pages/vitest-reports || echo "No vitest-reports directory"
  #         echo "Preview URL: https://comfyorg-comfyui-frontend.vercel.app"

  deploy-github-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-vercel-app:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: download built pages
        uses: actions/download-artifact@v3
        with:
          name: built-pages
          path: ./docs/pages
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }} # Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }} # Required
          working-directory: ./docs/pages
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # Required for Vercel Action
