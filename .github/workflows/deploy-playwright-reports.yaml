name: Deploy Playwright Reports

# This workflow uses pull_request_target to deploy reports from forked PRs
# Security: We only deploy artifacts, never check out or execute untrusted code
on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches-ignore:
      [wip/*, draft/*, temp/*, vue-nodes-migration, sno-playwright-*]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  wait-for-tests:
    runs-on: ubuntu-latest
    outputs:
      tests-completed: ${{ steps.check-tests.outputs.completed }}
      run-id: ${{ steps.check-tests.outputs.run-id }}
    steps:
      - name: Wait for test workflow to complete
        id: check-tests
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.payload.pull_request.head.sha;
            
            // Wait up to 30 minutes for tests to complete
            const maxWaitTime = 30 * 60 * 1000; // 30 minutes in ms
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              console.log('Checking for test workflow runs...');
              
              const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                event: 'pull_request',
                head_sha: sha,
                status: 'completed'
              });
              
              // Look for the test workflow (Tests CI)
              const testRun = runs.workflow_runs.find(run => 
                run.name === 'Tests CI' && run.head_sha === sha
              );
              
              if (testRun) {
                console.log(`Found completed test run: ${testRun.id}`);
                core.setOutput('completed', 'true');
                core.setOutput('run-id', testRun.id.toString());
                return;
              }
              
              console.log('Tests not yet completed, waiting 30 seconds...');
              await new Promise(resolve => setTimeout(resolve, 30000));
            }
            
            console.log('Timeout waiting for tests to complete');
            core.setOutput('completed', 'false');
            core.setOutput('run-id', '');

  deploy-reports:
    needs: wait-for-tests
    runs-on: ubuntu-latest
    if: needs.wait-for-tests.outputs.tests-completed == 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, chromium-2x, chromium-0.5x, mobile-chrome]
    steps:
      - name: Generate sanitized branch name
        id: branch-info
        run: |
          # Get branch name and sanitize it for Cloudflare branch names
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "sanitized=${SANITIZED_BRANCH}" >> $GITHUB_OUTPUT

      - name: Set project name
        id: project-name
        run: |
          if [ "${{ matrix.browser }}" = "chromium-0.5x" ]; then
            echo "name=comfyui-playwright-chromium-0-5x" >> $GITHUB_OUTPUT
          else
            echo "name=comfyui-playwright-${{ matrix.browser }}" >> $GITHUB_OUTPUT
          fi

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ needs.wait-for-tests.outputs.run-id }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Deploy to Cloudflare Pages (${{ matrix.browser }})
        id: cloudflare-deploy
        run: |
          # Retry logic for wrangler deploy (3 attempts)
          RETRY_COUNT=0
          MAX_RETRIES=3
          SUCCESS=false
          
          echo "Deploying to Cloudflare Pages (branch: ${{ steps.branch-info.outputs.sanitized }})..."
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ $SUCCESS = false ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Deployment attempt $RETRY_COUNT of $MAX_RETRIES..."
            
            if npx wrangler pages deploy playwright-report --project-name=${{ steps.project-name.outputs.name }} --branch=${{ steps.branch-info.outputs.sanitized }}; then
              SUCCESS=true
              echo "‚úÖ Deployment successful on attempt $RETRY_COUNT"
              # Capture deployment URL
              echo "deployment-url=https://${{ steps.branch-info.outputs.sanitized }}.${{ steps.project-name.outputs.name }}.pages.dev" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Deployment failed on attempt $RETRY_COUNT"
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          if [ $SUCCESS = false ]; then
            echo "All deployment attempts failed"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment on PR with deployment link
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            const browser = '${{ matrix.browser }}';
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.deployment-url }}';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `üöÄ **${{ matrix.browser }}** test report deployed via \`pull_request_target\`!\n\nüìä [View Report](${deploymentUrl})\n\n*This deployment has access to secrets and can deploy from forked PRs securely.*`
            });

  deployment-summary:
    needs: [wait-for-tests, deploy-reports]
    runs-on: ubuntu-latest
    if: always() && needs.wait-for-tests.outputs.tests-completed == 'true'
    steps:
      - name: Comment deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            
            let summary = 'üéØ **pull_request_target Deployment Summary**\n\n';
            summary += '‚úÖ All browser test reports have been deployed with full secret access!\n\n';
            summary += '**Benefits of this approach:**\n';
            summary += '- ‚úÖ Works with forked PRs\n';
            summary += '- ‚úÖ Access to Cloudflare secrets\n';
            summary += '- ‚úÖ Secure (no untrusted code execution)\n';
            summary += '- ‚úÖ Reports available at custom URLs\n\n';
            summary += '*This workflow uses `pull_request_target` event to safely deploy artifacts from completed test runs.*';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: summary
            });