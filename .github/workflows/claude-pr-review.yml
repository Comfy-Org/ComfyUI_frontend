name: Claude PR Review

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

on:
  pull_request:
    types: [labeled]

jobs:
  wait-for-ci:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'claude-review'
    outputs:
      should-proceed: ${{ steps.check-status.outputs.proceed }}
    steps:
      - name: Wait for other CI checks
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-regexp: '^(eslint|prettier|test)'
          wait-interval: 30
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if we should proceed
        id: check-status
        run: |
          # Get all check runs for this commit
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs --jq '.check_runs[] | select(.name | test("eslint|prettier|test")) | {name, conclusion}')
          
          # Check if any required checks failed
          if echo "$CHECK_RUNS" | grep -q '"conclusion": "failure"'; then
            echo "Some CI checks failed - skipping Claude review"
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "All CI checks passed - proceeding with Claude review"
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  claude-review:
    needs: wait-for-ci
    if: needs.wait-for-ci.outputs.should-proceed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies for analysis tools
        run: |
          npm install -g typescript @vue/compiler-sfc

      - name: Run Claude PR Review
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            You are performing a code review for PR #${{ github.event.pull_request.number }} in the ComfyUI_frontend repository.
            
            STEP 1: Get PR information and changed files
            Execute this bash command:
            ```bash
            gh pr view $PR_NUMBER --json files,title,body,additions,deletions --jq '.files[].filename' > changed_files.txt
            echo "Changed files:"
            cat changed_files.txt
            ```
            
            STEP 2: Analyze each changed file
            For each file in changed_files.txt:
            - Read the file using the Read tool
            - Look for these issues:
              * Security vulnerabilities (hardcoded secrets, SQL injection, XSS)
              * Performance problems (console.log statements, inefficient code)
              * Code quality issues (missing error handling, deprecated patterns)
              * Architecture violations (improper component structure)
            
            STEP 3: Post individual inline review comments
            For each issue found, post an inline comment using this bash function:
            ```bash
            add_inline_comment() {
              local file_path=$1
              local line_number=$2  
              local severity=$3
              local category=$4
              local issue=$5
              local suggestion=$6
              
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/$REPOSITORY/pulls/$PR_NUMBER/comments \
                -f body="**[$category] $severity Priority**

            **Issue**: $issue
            **Suggestion**: $suggestion

            This review is generated by Claude." \
                -f commit_id="$COMMIT_SHA" \
                -f path="$file_path" \
                -F line=$line_number \
                -f side="RIGHT"
            }
            
            # Example usage:
            # add_inline_comment "src/services/testReviewService.ts" 15 "Critical" "Security" "Hardcoded API key" "Use environment variables instead"
            ```
            
            STEP 4: Post final summary review
            After posting all inline comments, create a summary:
            ```bash
            gh pr review $PR_NUMBER --comment --body "# ðŸ¤– Claude PR Review Summary

            **Issues Found**: [X total]
            - Critical: [X]  
            - High: [X]
            - Medium: [X]
            - Low: [X]

            See individual inline comments above for specific issues and suggestions.

            This review is generated by Claude. It may not always be accurate. Please verify suggestions before implementing."
            ```
            
            The environment variables PR_NUMBER, GITHUB_TOKEN, COMMIT_SHA, and REPOSITORY are already set.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          max_turns: 30
          timeout_minutes: 30
          allowed_tools: "Bash(git:*),Bash(gh:*),Bash(jq:*),Bash(curl:*),Bash(echo:*),Bash(mkdir:*),Bash(mv:*),Bash(cp:*),Bash(find:*),Bash(cat:*),Bash(wc:*),Bash(awk:*),Bash(date:*),Bash(export:*),Read,Write,Edit,Glob,Grep,WebFetch"
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          REPOSITORY: ${{ github.repository }}