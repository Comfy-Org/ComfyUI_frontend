name: Auto Backport

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  backport:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'needs-backport')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PR_GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version labels
        id: versions
        run: |
          # Extract version labels (e.g., "1.24", "1.22")
          VERSIONS=""
          for label in ${{ join(github.event.pull_request.labels.*.name, ' ') }}; do
            if [[ "$label" =~ ^[0-9]+\.[0-9]+$ ]]; then
              VERSIONS="${VERSIONS}${label} "
            fi
          done
          
          if [ -z "$VERSIONS" ]; then
            echo "::error::No version labels found (e.g., 1.24, 1.22)"
            exit 1
          fi
          
          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT
          echo "Found version labels: ${VERSIONS}"

      - name: Backport commits
        id: backport
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          MERGE_COMMIT: ${{ github.event.pull_request.merge_commit_sha }}
        run: |
          FAILED=""
          SUCCESS=""
          
          for version in ${{ steps.versions.outputs.versions }}; do
            echo "::group::Backporting to core/${version}"
            
            TARGET_BRANCH="core/${version}"
            BACKPORT_BRANCH="backport-${PR_NUMBER}-to-${version}"
            
            # Fetch target branch (fail if doesn't exist)
            if ! git fetch origin "${TARGET_BRANCH}"; then
              echo "::error::Target branch ${TARGET_BRANCH} does not exist"
              FAILED="${FAILED}${version}:branch-missing "
              echo "::endgroup::"
              continue
            fi
            
            # Create backport branch
            git checkout -b "${BACKPORT_BRANCH}" "origin/${TARGET_BRANCH}"
            
            # Try cherry-pick
            if git cherry-pick "${MERGE_COMMIT}"; then
              git push origin "${BACKPORT_BRANCH}"
              SUCCESS="${SUCCESS}${version}:${BACKPORT_BRANCH} "
              echo "Successfully created backport branch: ${BACKPORT_BRANCH}"
            else
              # Get conflict info
              CONFLICTS=$(git diff --name-only --diff-filter=U)
              git cherry-pick --abort
              
              echo "::error::Cherry-pick failed due to conflicts"
              FAILED="${FAILED}${version}:conflicts "
              
              # Save conflict info for comment
              echo "CONFLICTS_${version}<<EOF" >> $GITHUB_ENV
              echo "${CONFLICTS}" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
            
            # Return to main
            git checkout main
            git branch -D "${BACKPORT_BRANCH}" 2>/dev/null || true
            
            echo "::endgroup::"
          done
          
          echo "success=${SUCCESS}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
          
          if [ -n "${FAILED}" ]; then
            exit 1
          fi

      - name: Create PR for each successful backport
        if: steps.backport.outputs.success
        env:
          GH_TOKEN: ${{ secrets.PR_GH_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          for backport in ${{ steps.backport.outputs.success }}; do
            IFS=':' read -r version branch <<< "${backport}"
            
            # Create PR using GitHub CLI
            PR_URL=$(gh pr create \
              --base "core/${version}" \
              --head "${branch}" \
              --title "[backport ${version}] ${{ github.event.pull_request.title }}" \
              --body "Backport of #${{ github.event.pull_request.number }} to \`core/${version}\`

Automatically created by backport workflow." \
              2>&1) || true
            
            if [[ "${PR_URL}" =~ pull/[0-9]+ ]]; then
              PR_NUM=$(echo "${PR_URL}" | grep -o 'pull/[0-9]*' | grep -o '[0-9]*')
              
              # Comment on original PR about success
              gh pr comment ${{ github.event.pull_request.number }} --body "@${{ github.event.pull_request.user.login }} ✅ Successfully backported to #${PR_NUM}"
            fi
          done

      - name: Comment on failures
        if: failure() && steps.backport.outputs.failed
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for failure in ${{ steps.backport.outputs.failed }}; do
            IFS=':' read -r version reason <<< "${failure}"
            
            if [ "${reason}" = "branch-missing" ]; then
              gh pr comment ${{ github.event.pull_request.number }} --body "@${{ github.event.pull_request.user.login }} ❌ Backport failed: Branch \`core/${version}\` does not exist"
            
            elif [ "${reason}" = "conflicts" ]; then
              CONFLICTS_VAR="CONFLICTS_${version}"
              CONFLICTS="${!CONFLICTS_VAR}"
              
              gh pr comment ${{ github.event.pull_request.number }} --body "@${{ github.event.pull_request.user.login }} ❌ Backport to \`core/${version}\` failed: Merge conflicts detected. Please manually cherry-pick commit \`${{ github.event.pull_request.merge_commit_sha }}\` to the \`core/${version}\` branch. Conflicting files: ${CONFLICTS}"
            fi
          done
